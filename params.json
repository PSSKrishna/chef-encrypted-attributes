{
  "name": "Chef-encrypted-attributes",
  "tagline": "Chef plugin to add Node encrypted attributes support using client keys.",
  "body": "# Chef-Encrypted-Attributes\r\n[![Gem Version](http://img.shields.io/gem/v/chef-encrypted-attributes.svg?style=flat)](http://badge.fury.io/rb/chef-encrypted-attributes)\r\n[![GitHub](http://img.shields.io/badge/github-zuazo/chef--encrypted--attributes-blue.svg?style=flat)](https://github.com/zuazo/chef-encrypted-attributes)\r\n[![License](https://img.shields.io/github/license/zuazo/chef-encrypted-attributes.svg?style=flat)](#license-and-author)\r\n\r\n[![Dependency Status](http://img.shields.io/gemnasium/zuazo/chef-encrypted-attributes.svg?style=flat)](https://gemnasium.com/zuazo/chef-encrypted-attributes)\r\n[![Code Climate](http://img.shields.io/codeclimate/github/zuazo/chef-encrypted-attributes.svg?style=flat)](https://codeclimate.com/github/zuazo/chef-encrypted-attributes)\r\n[![Build Status](http://img.shields.io/travis/zuazo/chef-encrypted-attributes/0.9.0.svg?style=flat)](https://travis-ci.org/zuazo/chef-encrypted-attributes)\r\n[![Coverage Status](http://img.shields.io/coveralls/zuazo/chef-encrypted-attributes/0.9.0.svg?style=flat)](https://coveralls.io/r/zuazo/chef-encrypted-attributes?branch=0.9.0)\r\n[![Inline docs](http://inch-ci.org/github/zuazo/chef-encrypted-attributes.svg?branch=master&style=flat)](http://inch-ci.org/github/zuazo/chef-encrypted-attributes)\r\n\r\n[Chef](https://www.chef.io/) plugin to add Node encrypted attributes support using client keys.\r\n\r\nWe recommend using the [`encrypted_attributes`](https://supermarket.chef.io/cookbooks/encrypted_attributes) cookbook for easy installation.\r\n\r\n## Description\r\n\r\nNode attributes are encrypted using chef client and user keys with public key infrastructure (PKI). You can choose which clients, nodes or users will be able to read the attribute.\r\n\r\n*Chef Nodes* with read access can be specified using a `node_search` query. In case new nodes are added or removed, the data will be re-encrypted in the next *Chef Run* of the encrypting node (using the `#update` method shown below). Similarly, a `client_search` query can be used to allow *Chef Clients* to read the attribute.\r\n\r\n## Requirements\r\n\r\n* Ruby `>= 2.0`\r\n* Chef Client `~> 11.8`\r\n* yajl_ruby `~> 1.1` or ffi_yajl `>= 1.0, <3.0` (included with Chef)\r\n* If you want to use protocol version 2 to use [GCM](http://en.wikipedia.org/wiki/Galois/Counter_Mode) (disabled by default):\r\n * Ruby `>= 2`.\r\n * OpenSSL `>= 1.0.1`.\r\n\r\n## Usage in Recipes\r\n\r\nBefore reading all the documentation below, we recommend you take a look at the [`encrypted_attributes` cookbook's helper libraries](https://github.com/zuazo/encrypted_attributes-cookbook#helper-libraries). Those libraries are easier to use than the underlying API and cover the most common use cases.\r\n\r\n### Installing and Including the Gem\r\n\r\nYou need to install and include the `chef-encrypted-attributes` gem before using encrypted attributes inside a cookbook.\r\n\r\n```ruby\r\nchef_gem 'chef-encrypted-attributes'\r\nrequire 'chef/encrypted_attributes'\r\n```\r\n\r\n### Typical Example\r\n\r\nIn the following example we save a simple FTP user password.\r\n\r\n```ruby\r\nchef_gem 'chef-encrypted-attributes'\r\nrequire 'chef/encrypted_attributes'\r\n\r\n# include the #secure_password method\r\nChef::Recipe.send(:include, Opscode::OpenSSL::Password)\r\n\r\nif Chef::EncryptedAttribute.exist?(node['myapp']['ftp_password'])\r\n  # update with the new keys\r\n  Chef::EncryptedAttribute.update(node.set['myapp']['ftp_password'])\r\n\r\n  # read the password\r\n  ftp_pass = Chef::EncryptedAttribute.load(node['myapp']['ftp_password'])\r\nelse\r\n  # create the password and save it\r\n  ftp_pass = secure_password\r\n  node.set['myapp']['ftp_password'] = Chef::EncryptedAttribute.create(ftp_pass)\r\nend\r\n\r\n# use `ftp_pass` for something here ...\r\n```\r\n\r\n**Note:** This example requires the [`openssl`](https://supermarket.chef.io/cookbooks/openssl) cookbook.\r\n\r\n### Minimal Write Only Example\r\n\r\nIn this example we only need to save some data from the local node and read it from another:\r\n\r\n```ruby\r\nchef_gem 'chef-encrypted-attributes'\r\nrequire 'chef/encrypted_attributes'\r\n\r\n# Allow all admin clients to read the attributes encrypted by me\r\nChef::Config[:encrypted_attributes][:client_search] = 'admin:true'\r\n\r\n# Allow all webapp nodes to read the attributes encrypted by me\r\nChef::Config[:encrypted_attributes][:node_search] = 'role:webapp'\r\n\r\nif Chef::EncryptedAttribute.exist?(node['myapp']['encrypted_data'])\r\n  # we can used #load here as above if we need the `encrypted_data` outside\r\n  # this `if`\r\n\r\n  # update with the new keys\r\n  Chef::EncryptedAttribute.update(node.set['myapp']['encrypted_data'])\r\nelse\r\n  # create the data, encrypt and save it\r\n  data_to_encrypt = # ....\r\n  node.set['myapp']['encrypted_data'] =\r\n    Chef::EncryptedAttribute.create(data_to_encrypt)\r\nend\r\n```\r\n\r\nThen we can read this attribute from another allowed node (a `'role:webapp'` node):\r\n\r\n```ruby\r\ninclude_recipe 'encrypted_attributes'\r\n# Expose the public key for encryption\r\ninclude_recipe 'encrypted_attributes::expose_key'\r\n\r\nif Chef::EncryptedAttribute.exist_on_node?(\r\n     'random.example.com', %w(myapp encrypted_data)\r\n   )\r\n  data = Chef::EncryptedAttribute.load_from_node(\r\n    'random.example.com', %w(myapp encrypted_data)\r\n  )\r\n\r\n  # use `data` for something here ...\r\nend\r\n```\r\n\r\n**Note:** Be careful when using `#exist_on_node?` and `#load_from_node` and remember passing the attribute path to read as **Array of Strings** ~~instead of using `node[...]` (which points to the local node)~~.\r\n\r\n### Example Using User Keys Data Bag\r\n\r\nSuppose we want to store users public keys in a data bag and give them access to the attributes. This can be a workaround for the [Chef Users Limitation](#chef-user-keys-access-limitation) problem.\r\n\r\nYou need to create a Data Bag Item with a content similar to the following:\r\n\r\n```json\r\n{\r\n  \"id\": \"chef_users\",\r\n  \"bob\": \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFA...\",\r\n  \"alice\": \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFA...\"\r\n}\r\n```\r\n\r\nThis data bag will contain the user public keys retrieved with `knife user show USER -a public_key -f json`.\r\n\r\nThen, from a recipe, you can read this user keys and allow them to read the attributes.\r\n\r\n```ruby\r\nchef_gem 'chef-encrypted-attributes'\r\nrequire 'chef/encrypted_attributes'\r\n\r\nchef_users = Chef::DataBagItem.load('global_data_bag', 'chef_users')\r\n# remove the data bag \"id\" to avoid to confuse it with a user:\r\nchef_users.delete('id')\r\n\r\nChef::Log.debug(\r\n  \"Chef Users able to read the Encrypted Attributes: #{chef_users.keys.inspect}\"\r\n)\r\nChef::Config[:encrypted_attributes][:keys] = chef_users.values\r\n\r\n# if Chef::EncryptedAttribute.exist?(...)\r\n#   Chef::EncryptedAttribute.update(...)\r\n# else\r\n#   node.set[...][...] = Chef::EncryptedAttribute.create(...)\r\n# ...\r\n```\r\n\r\n**Note:** This data bag does **not** need to be **encrypted**, because it only stores **public keys**.\r\n\r\n## Chef::EncryptedAttribute API\r\n\r\nSee the [API documentation](http://www.rubydoc.info/gems/chef-encrypted-attributes/Chef/EncryptedAttribute/API.html) for a more detailed information about `Chef::EncryptedAttribute` class and its methods.\r\n\r\n## Chef User Keys Access Limitation\r\n\r\nKeep in mind that, from a Chef Node, *Chef User* *public keys* are inaccessible. So you have to pass them in raw mode in the recipe if you need any *Chef User* to be able to use the encrypted attributes (this is **required for** example to use the **knife commands** included in this gem, as knife is usually used by *Chef Users*). Summarizing, Chef Node inside a recipe (using its *Chef Client* key) will not be able to retrieve the *Chef Users* *public keys*, so you need to pass them using the `[:keys]` configuration value.\r\n\r\nChef Nodes (Clients) with *admin* privileges do have access to user public keys, but in most cases this is not a recommended practice.\r\n\r\nSee the [Example Using User Keys Data Bag](#example-using-user-keys-data-bag) section for a workaround. You can use the [`encrypted_attributes::users_data_bag`](https://supermarket.chef.io/cookbooks/encrypted_attributes#encrypted_attributes::users_data_bag) recipe for this.\r\n\r\n**Note:** *Chef Clients* usually are Chef Nodes and *chef-validation*/*chef-webui* keys. *Chef Users* usually are knife users. The main difference between *Chef Users* and *Chef Clients* is that the former are able to log in via *web-ui* (has a password).\r\n\r\n## Chef Client Keys Access Limitation\r\n\r\n*Chef Client* *public keys* has a [similar problem to the user keys](#chef-user-keys-access-limitation), you cannot retrieve them from a Chef Node.\r\n\r\nTo fix this limitation you should expose de *Chef Client* *public key* in the `node['public_key']` attribute. You can include the [`encrypted_attributes::expose_key`](https://supermarket.chef.io/cookbooks/encrypted_attributes#encrypted_attributes::expose_key) recipe for this. You need to include this recipe in the *Chef Nodes* that require read privileges on the encrypted attributes.\r\n\r\nExposing the public key through attributes should not be considered a security breach, so it's not a problem to include it on all machines.\r\n\r\n## Maximum Number of Nodes\r\n\r\nThis gem is ready to be used with Chef Servers that have less than `1000` nodes by default. You can increase this limit setting the `search_max_rows` configuration option:\r\n\r\n```ruby\r\nChef::Config[:encrypted_attributes][:search_max_rows] = 50_000\r\n```\r\n\r\n## Knife Commands\r\n\r\nSee the [KNIFE.md](http://www.rubydoc.info/gems/chef-encrypted-attributes/file/KNIFE.md) file.\r\n\r\n## Internal Low Level Documentation\r\n\r\nThe cryptographic systems used are documented in the following classes:\r\n\r\n* [EncryptedMash](http://www.rubydoc.info/gems/chef-encrypted-attributes/Chef/EncryptedAttribute/EncryptedMash)\r\n * [EncryptedMash::Version0](http://www.rubydoc.info/gems/chef-encrypted-attributes/Chef/EncryptedAttribute/EncryptedMash/Version0)\r\n * [EncryptedMash::Version1](http://www.rubydoc.info/gems/chef-encrypted-attributes/Chef/EncryptedAttribute/EncryptedMash/Version1)\r\n * [EncryptedMash::Version2](http://www.rubydoc.info/gems/chef-encrypted-attributes/Chef/EncryptedAttribute/EncryptedMash/Version2)\r\n\r\nSee the [official gem documentation](http://www.rubydoc.info/gems/chef-encrypted-attributes/) for more information.\r\n\r\n## Using Signed Gems\r\n\r\nThe `chef-encrypted-attributes` gem is cryptographically signed by Onddo Labs's certificate, which identifies as *xabier@zuazo.org*. You can obtain the official signature here:\r\n\r\n    https://raw.github.com/zuazo/chef-encrypted-attributes/0.9.0/certs/xabier_zuazo.crt\r\n\r\nTo be sure the gem you install has not been tampered with:\r\n\r\n    $ gem cert --add <(curl -Ls https://raw.github.com/zuazo/chef-encrypted-attributes/0.9.0/certs/xabier_zuazo.crt)\r\n    $ gem install chef-encrypted-attributes -P MediumSecurity\r\n\r\nThe *MediumSecurity* trust profile will verify signed gems, but allow the installation of unsigned dependencies. This is necessary because not all of `chef-encrypted-attributes`'s dependencies are signed, so we cannot use *HighSecurity*.\r\n\r\nWe recommend to remove our certificate after the gem has been successfully verified and installed:\r\n\r\n    $ gem cert --remove '/cn=xabier/dc=zuazo/dc=org'\r\n\r\n## Security Notes\r\n\r\nAll the cryptographic systems and algorithms used by `chef-encrypted-attributes` are carefully described in the [internal documentation](#internal-low-level-documentation) for public review. The code was originally based on *Encrypted Data Bags* and [chef-vault](https://github.com/Nordstrom/chef-vault) implementations, then improved.\r\n\r\nStill, this gem should be considered experimental until audited by professional cryptographers.\r\n\r\n## Reporting Security Problems\r\n\r\nIf you have discovered a bug in `chef-encrypted-attributes` of a sensitive nature, i.e.  one which can compromise the security of `chef-encrypted-attributes` users, you can report it securely by sending a GPG encrypted message. Please use the following key:\r\n\r\n    https://raw.github.com/zuazo/chef-encrypted-attributes/0.9.0/zuazo.gpg\r\n\r\nThe key fingerprint is (or should be):\r\n\r\n    ADAE EEFC BD78 6CBB B76B  1662 2195 FF19 5324 14AB\r\n\r\n## Testing\r\n\r\nSee [TESTING.md](https://github.com/zuazo/chef-encrypted-attributes/blob/master/TESTING.md).\r\n\r\n## Contributing\r\n\r\nPlease do not hesitate to [open an issue](https://github.com/zuazo/chef-encrypted-attributes/issues/new) with any questions or problems.\r\n\r\nSee [CONTRIBUTING.md](https://github.com/zuazo/chef-encrypted-attributes/blob/master/CONTRIBUTING.md).\r\n\r\n## TODO\r\n\r\nSee [TODO.md](https://github.com/zuazo/chef-encrypted-attributes/blob/master/TODO.md).\r\n\r\n## License and Author\r\n\r\n|                      |                                          |\r\n|:---------------------|:-----------------------------------------|\r\n| **Author:**          | [Xabier de Zuazo](https://github.com/zuazo) (<xabier@zuazo.org>)\r\n| **Contributor:**     | [Josh Kalderimis](https://github.com/joshk)\r\n| **Contributor:**     | [Crystal Hsiung](https://github.com/chhsiung)\r\n| **Contributor:**     | [Lisa Danz](https://github.com/ldanz)\r\n| **Contributor:**     | [Eric Blevins](https://github.com/e100)\r\n| **Copyright:**       | Copyright (c) 2016 Xabier de Zuazo\r\n| **Copyright:**       | Copyright (c) 2014-2015 Onddo Labs, SL.\r\n| **License:**         | Apache License, Version 2.0\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n    \r\n        http://www.apache.org/licenses/LICENSE-2.0\r\n    \r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.",
  "google": "UA-6988302-3",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}